{"version":3,"names":[],"mappings":"","sources":["overwebs-app.js"],"sourcesContent":["import { GluonElement, html } from '../gluonjs/gluon.js';\nimport { onRouteChange, resolveURL } from '../gluon-router/gluon-router.js';\nimport '../overwebs-main-page/overwebs-main-page.js';\nimport '../overwebs-login-page/overwebs-login-page.js';\nimport '../overwebs-play-page/overwebs-play-page.js';\nimport '../overwebs-background-data/overwebs-background-data.js';\nimport '../overwebs-background/overwebs-background.js';\n\n// Test for mobile agents\nlet _mobile;\n(function(a) {\n  _mobile =\n    /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n      a\n    ) ||\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n      a.substr(0, 4)\n    );\n})(navigator.userAgent || navigator.vendor || window.opera);\n\nif (_mobile) {\n  document.documentElement.style.setProperty(`--overwebs-window-size`, `1620px`);\n}\n\nconst playerStub = {\n  unlocks: {\n    ana: 12,\n    bastion: 47,\n    dva: 24,\n    genji: 42,\n    hanzo: 36,\n    junkrat: 18,\n    lucio: 46,\n    mccree: 12,\n    mei: 25,\n    mercy: 2,\n    pharah: 17,\n    reaper: 39,\n    reinhardt: 10,\n    roadhog: 32,\n    soldier76: 33,\n    symmetra: 15,\n    torbjorn: 17,\n    tracer: 27,\n    widowmaker: 25,\n    winston: 46,\n    zarya: 18,\n    zenyatta: 51,\n    sombra: 37\n  }\n};\n\nexport class OverwebsApp extends GluonElement {\n  get template() {\n    return html`\n    <style>\n      :host {\n        display: block;\n        position: relative;\n        background: black;\n      }\n\n      #chat[hidden] {\n        display: none;\n      }\n\n      #pages > * {\n        min-height: 100vh;\n      }\n      #pages > *:not(.visible) {\n        display: none;\n      }\n\n      #exit {\n        display: block;\n        position: relative;\n        height: 100vh;\n        width: 100vw;\n        background: black;\n      }\n      .loading {\n        display: block;\n        position: relative;\n        height: 100vh;\n        width: 100vw;\n        background: red;\n      }\n    </style>\n    <overwebs-background-data id=\"backgroundData\"></overwebs-background-data>\n    <overwebs-background id=\"background\"></overwebs-background>\n\n    <div id=\"pages\">\n      <a href=\"/login\" route=\"exit\" id=\"exit\"></a>\n      <overwebs-login-page id=\"loginPage\" route=\"login\"></overwebs-login-page>\n      <overwebs-main-page id=\"mainPage\" route=\"main\"></overwebs-main-page>\n      <overwebs-gallery-page route=\"hero-gallery\"></overwebs-gallery-page>\n      <overwebs-play-page route=\"play\"></overwebs-play-page>\n      <overwebs-competitive-page route=\"competitive\"></overwebs-competitive-page>\n      <overwebs-arcade-page route=\"arcade\"></overwebs-arcade-page>\n      <overwebs-training-page route=\"training\"></overwebs-training-page>\n      <overwebs-vs-ai-page route=\"vs-ai\"></overwebs-vs-ai-page>\n      <div class=\"loading visible\" route=\"loading\"></div>\n    </div>\n\n    <overwebs-notification id=\"notification\" spinner hidden>\n      <div slot=\"title\" id=\"notification-title\"></div>\n      <div slot=\"message\" id=\"notification-message\"></div>\n      <div slot=\"button\" id=\"notification-button\"></div>\n    </overwebs-notification>\n\n    <overwebs-queue-manager id='queue-manager'></overwebs-queue-manager>\n\n    <overwebs-player-data id=\"playerData\"></overwebs-player-data>\n    <overwebs-chat-widget id=\"chat\" tabindex=\"-1\" firebase=\"[[firebase]]\" player-data=\"[[playerData]]\"></overwebs-chat-widget>\n    `;\n  }\n  constructor() {\n    super();\n    // TODO: Remember the initial route so we can redirect there after the loading redirect\n\n    const config = {\n      apiKey: 'AIzaSyD-FCqLAtCYYCitKmErFWT2xEQyHk7fhBU',\n      authDomain: 'overwebs-86c53.firebaseapp.com',\n      databaseURL: 'https://overwebs-86c53.firebaseio.com'\n    };\n    firebase.initializeApp(config);\n\n    this._routes = {};\n    this.loginStatus = {};\n\n    // At initial boot, redirect to loading screen\n    this._oldPath = 'loading';\n    window.history.replaceState({}, null, '/loading');\n    window.dispatchEvent(new Event('location-changed'));\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.$.playerData.player = playerStub;\n\n    onRouteChange((path, query, hash) => {\n      // Some browsers call `onRouteChange` before `ready`.\n      // If this happens, `this._routes` is still empty.\n      // In that case, simply defer the call to `_routeChanged`.\n      // if (Object.keys(this._routes).length === 0) {\n      //   setTimeout(() => { this._routeChanged(newRoute, oldRoute) }, 0);\n      //   return;\n      // }\n\n      // I'm not sure if this belongs here. Maybe I need to extract the logic for this somehow and expose an API\n      const backgroundChange = query.match(/background=([^\\?]*)/);\n      if (backgroundChange) {\n        this.$.backgroundData.select = backgroundChange[1]; // TODO: USE QUERY\n        window.history.replaceState({}, null, '/main');\n        window.dispatchEvent(new Event('location-changed'));\n        return;\n      }\n\n      // Remove initial '/' in the route path\n      const oldPath = this._oldPath;\n      const newPath = path.slice(1);\n      this._oldPath = newPath;\n\n      // Hide the old page\n      if (this._routes[oldPath]) {\n        this._routes[oldPath].classList.remove('visible');\n      }\n\n      // Redirect to login if we are not logged in\n      if (!(this.loginStatus.firebase && this.loginStatus.battlenet) && newPath != 'login') {\n        window.history.replaceState({}, null, '/login');\n        window.dispatchEvent(new Event('location-changed'));\n        return;\n      }\n\n      // Show the new page\n      if (this._routes[newPath]) {\n        this._routes[newPath].classList.add('visible');\n      } else {\n        // Go back if the new page does not exist (and the old page does)\n        if (this._routes[oldPath]) {\n          console.warn('Requested page does not exist');\n          window.history.back();\n        }\n        return;\n      }\n\n      // Enable or disable or move the chat widget depending on the page.\n      // Should this be responsibility of the app? I don't know.\n      if (newPath === 'login') {\n        this.$.chat.setAttribute('hidden', '');\n      } else {\n        this.$.chat.removeAttribute('hidden');\n      }\n\n      // Notify the background element that we changed route\n      this.$.background.page = newPath;\n\n      // Lazy load any new pages we are visiting that haven't been loaded yet\n      if (newPath != 'main' && this._routes[newPath] && newPath != 'exit') {\n        let newPathElement = this._routes[newPath].tagName.toLowerCase();\n        // TODO: Relative imports\n        let newPage = (window.modulesAssetPath && `${window.modulesAssetPath(newPathElement)}/${newPathElement}.js`) || 'someElement.js';\n        console.log(`Attempting to lazy-load ${newPage}`);\n        // TODO: Dynamic imports\n        // import(newPage).then(() => {\n        //   console.log('Lazy loaded ' + newPage);\n        // }, () => {\n        //   console.warn('Cannot lazy load ' + newPage);\n        //   window.history.back();\n        // });\n      }\n\n      if (newPath === 'exit') {\n        document.cookie = 'userName=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        document.cookie = 'battleTag=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        document.cookie = 'anonymous=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        this.loginStatus = {};\n      }\n    });\n\n    Array.prototype.map.call(this.$.pages.children, page => {\n      this._routes[page.getAttribute('route')] = page;\n    });\n    if (_mobile) {\n      this.$.background.lowBandwidth = true;\n    }\n\n    // Check if this user has previously logged in by checking cookies\n    const anonymous = document.cookie.replace(/(?:(?:^|.*;\\s*)anonymous\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n    if (anonymous) {\n      // If the user logged in as anonymous, perform anonymous login\n      this._login(null, null, anonymous);\n    } else {\n      const userName = document.cookie.replace(/(?:(?:^|.*;\\s*)userName\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n      // If the user logged in with a userName, perform login with userName and battleTag\n      if (userName) {\n        const battleTag = document.cookie.replace(/(?:(?:^|.*;\\s*)battleTag\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n        this._login(userName, battleTag, false);\n      } else {\n        // Otherwise, redirect to login page\n        window.history.replaceState({}, null, '/login');\n        window.dispatchEvent(new Event('location-changed'));\n      }\n    }\n\n    // Listen to login events from the loginPage\n    this.$.loginPage.addEventListener(\n      'login',\n      e => {\n        const login = e.detail;\n        if (login.anonymous) {\n          document.cookie = `anonymous=true`;\n        } else {\n          document.cookie = `userName=${login.userName}`;\n          if (login.battleTag) {\n            document.cookie = `battleTag=${login.battleTag}`;\n          }\n        }\n        this._login(login.userName, login.battleTag, login.anonymous);\n      },\n      true\n    );\n    this.$.loginPage.addEventListener('cancelLogin', this._cancelLogin);\n\n    this.$.background.backgrounds = this.$.backgroundData.backgrounds;\n    this.$.backgroundData.addEventListener('backgrounds-changed', () => (this.$.background.backgrounds = this.$.backgroundData.backgrounds), true);\n\n    this.addEventListener('notification', e => this._notification(e), true);\n\n    this.addEventListener('queue', e => this._queue(e.detail.queueType), true);\n  }\n\n  _login(userName, battleTag, anonymous) {\n    let userID;\n    let firebaseLogin;\n    let battlenetLogin;\n    // TODO: Start loading spinner state\n    this.$.loginPage.setAttribute('logging-in', '');\n    this.$.playerData.name = userName;\n\n    if (this.loginStatus.firebase) {\n      firebaseLogin = Promise.resolve();\n    } else {\n      if (anonymous) {\n        let anonymousTag = document.cookie.replace(/(?:(?:^|.*;\\s*)anonymousTag\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n        // Generate a persistent random tag for Anonymous logins\n        if (!anonymousTag) {\n          anonymousTag = Math.random()\n            .toString(36)\n            .slice(2, 8);\n          document.cookie = `anonymousTag=${anonymousTag}`;\n        }\n        userID = `Anonymous-${anonymousTag}`;\n      } else if (battleTag) {\n        userID = `${userName}-${battleTag}`;\n      } else {\n        userID = userName;\n      }\n\n      // Create a password equal to userID padded with 0s\n      const password = userID + '000000'.slice(userID.length);\n\n      // Log the user into firebase\n      firebaseLogin = firebase\n        .auth()\n        .createUserWithEmailAndPassword(`${userID}@ruph.in`, password)\n        .then(e => {\n          // If a new user is created, push the userID\n          // onto the database message list so we know who's who\n          firebase\n            .database()\n            .ref(`messages/${e.uid}`)\n            .push(userID);\n          return e;\n        })\n        .catch(e => {\n          // If the user already logged in before, just log in directly\n          if (e.code == 'auth/email-already-in-use') {\n            return firebase.auth().signInWithEmailAndPassword(`${userID}@ruph.in`, password);\n          } else {\n            throw e;\n          }\n        })\n        .then(e => {\n          e.updateProfile({ displayName: userID.replace('-', '#') }).catch(e => {\n            console.warn('Failed to add DisplayName');\n          });\n          this.loginStatus.firebase = true;\n          return true;\n        });\n    }\n\n    if (!anonymous && battleTag) {\n      battlenetLogin = new Promise((resolve, reject) => {\n        this._cancelLogin = reject;\n        const timer = setTimeout(reject, 5000);\n        const query = fetch(`https://owapi.net/api/v3/u/${userName}-${battleTag}/stats`);\n        query.then(response => {\n          clearTimeout(timer);\n          resolve(response);\n        });\n      })\n        .then(response => response.json())\n        .then(json => {\n          const account = json.any || json.eu || json.us || json.kr;\n          const stats = account.stats.quickplay.overall_stats;\n          this.$.playerData.level = stats.prestige * 100 + stats.level;\n          this.$.playerData.avatar = stats.avatar;\n          this.loginStatus.battlenet = true;\n        });\n    } else {\n      battlenetLogin = Promise.resolve();\n      this.$.playerData.level = Math.ceil(Math.random() * 1800);\n      this.$.playerData.avatar = '0x02500000000002F7';\n      this.loginStatus.battlenet = true;\n    }\n\n    Promise.all([firebaseLogin, battlenetLogin])\n      .then(() => {\n        this.$.loginPage.removeAttribute('logging-in');\n        window.history.replaceState({}, null, '/main');\n        window.dispatchEvent(new Event('location-changed'));\n      })\n      .catch(e => {\n        this.$.loginPage.removeAttribute('logging-in');\n        console.log(e);\n        window.history.replaceState({}, null, '/login');\n        window.dispatchEvent(new Event('location-changed'));\n      });\n  }\n\n  _queue(queueType) {\n    console.log(this.$['queue-manager']);\n    this.$['queue-manager'].queue(queueType);\n  }\n\n  _notification(e) {\n    this.$.notification.removeAttribute('hidden');\n    if (e.detail['title']) {\n      Polymer.dom(this.$['notification-title']).appendChild(e.detail['title']);\n    }\n    if (e.detail['message']) {\n      Polymer.dom(this.$['notification-message']).appendChild(e.detail['message']);\n    }\n    if (e.detail['button']) {\n      Polymer.dom(this.$['notification-button']).appendChild(e.detail['button']);\n    }\n  }\n}\n\ncustomElements.define(OverwebsApp.is, OverwebsApp);\n"],"file":"overwebs-app.js"}